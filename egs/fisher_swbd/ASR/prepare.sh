#!/usr/bin/env bash
. ./path.sh
set -eou pipefail

nj=15
stage=0
stop_stage=500

# We assume dl_dir (download dir) contains the following
# directories and files. Most of them can't be downloaded automatically
# as they are not publically available and require a license purchased 
# from the LDC.
#
#  - $dl_dir/{LDC2004S13,LDC2004T19,LDC2005S13,LDC2005T19}
#      Fisher LDC packages.
#
#  - $dl_dir/LDC97S62
#      Switchboard LDC audio package (transcripts are auto-downloaded)
#
#  - $dl_dir/{LDC2002S09,LDC2002T43}
#      Eval2000 audio and transcript
#
#  - $dl_dir/musan
#      This directory contains the following directories downloaded from
#       http://www.openslr.org/17/
#
#     - music
#     - noise
#     - speech

dl_dir=$PWD/download
mkdir -p $dl_dir

. shared/parse_options.sh || exit 1

# vocab size for sentence piece models.
# It will generate data/lang_bpe_xxx,
# data/lang_bpe_yyy if the array contains xxx, yyy
vocab_sizes=(
  500
)

# All files generated by this script are saved in "data".
# You can safely remove "data" and rerun this script to regenerate it.
mkdir -p data

log() {
  # This function is from espnet
  local fname=${BASH_SOURCE[1]##*/}
  echo -e "$(date '+%Y-%m-%d %H:%M:%S') (${fname}:${BASH_LINENO[0]}:${FUNCNAME[1]}) $*"
}

log "dl_dir: $dl_dir"

if [ $stage -le 0 ] && [ $stop_stage -ge 0 ]; then
  log "Stage 0: Download data"

  # If you have pre-downloaded it to /path/to/fisher and /path/to/swbd,
  # you can create a symlink
  #
  #   ln -sfv /path/to/fisher $dl_dir/fisher
  #

  # TODO: remove
  LDC_ROOT=/nas/data4/DATA
  for pkg in LDC2004S13 LDC2004T19 LDC2005S13 LDC2005T19 LDC97S62 LDC2002S09 LDC2002T43; do
    ln -sfv $LDC_ROOT/$pkg $dl_dir/
  done

  # If you have pre-downloaded it to /path/to/musan,
  # you can create a symlink
  #
  #   ln -sfv /path/to/musan $dl_dir/
  #
  if [ ! -d $dl_dir/musan ]; then
    lhotse download musan $dl_dir
  fi
fi

if [ $stage -le 1 ] && [ $stop_stage -ge 1 ] ; then
  log "Stage 1: Prepare Fisher manifests"
  mkdir -p data/manifests/fisher
  lhotse prepare fisher-english --absolute-paths 1 $dl_dir data/manifests/fisher
  local/normalize_and_filter_supervisions.py data/manifests/fisher/supervisions.jsonl.gz data/manifests/supervisions_fisher.jsonl.gz
  cp data/manifests/fisher/recordings.jsonl.gz data/manifests/recordings_fisher.jsonl.gz
  gzip -d data/manifests/supervisions_fisher.jsonl.gz
  gzip -d data/manifests/recordings_fisher.jsonl.gz
fi

if [ $stage -le 2 ] && [ $stop_stage -ge 2 ]; then
  log "Stage 2: Prepare SWBD manifests"
  mkdir -p data/manifests/swbd
  lhotse prepare switchboard --absolute-paths 1 --omit-silence $dl_dir/LDC97S62 data/manifests/swbd
  python3 local/normalize_and_filter_supervisions.py data/manifests/swbd/swbd_supervisions_all.jsonl.gz data/manifests/supervisions_swbd.jsonl.gz
  cp data/manifests/swbd/swbd_recordings_all.jsonl.gz data/manifests/recordings_swbd.jsonl.gz
  gzip -d data/manifests/supervisions_swbd.jsonl.gz
  gzip -d data/manifests/recordings_swbd.jsonl.gz
fi

if [ $stage -le 3 ] && [ $stop_stage -ge 3 ]; then
    mkdir -p  data/manifests/eval2000
    lhotse prepare eval2000 --absolute-paths 1 $dl_dir data/manifests/eval2000
    python3 local/normalize_eval2000.py data/manifests/eval2000/eval2000_supervisions_unnorm.jsonl.gz data/manifests/eval2000/supervisions_eval2000.jsonl.gz
    lhotse fix data/manifests/eval2000/eval2000_recordings_all.jsonl.gz data/manifests/eval2000/supervisions_eval2000.jsonl.gz data/manifests
    mv data/manifests/eval2000_recordings_all.jsonl.gz data/manifests/recordings_eval2000.jsonl.gz
    gzip -d  data/manifests/recordings_eval2000.jsonl.gz
    gzip -d  data/manifests/supervisions_eval2000.jsonl.gz
fi

if [ $stage -le 4 ] && [ $stop_stage -ge 4 ]; then
    mkdir -p data/fbank
    python3 local/compute_fbank_fisher_swbd_eval2000.py
fi

if [ $stage -le 5 ] && [ $stop_stage -ge 5 ]; then
    #####################################
    #fisher
    #####################################
    
    gzip -d data/fbank/cuts_fisher.json.gz
    jq -c '.[]' data/fbank/cuts_fisher.json  > data/fbank/cuts_fisher.jsonl
    gzip -c data/fbank/cuts_fisher.jsonl > data/fbank/cuts_fisher.jsonl.gz
   
    # extract list of sph
    python3 local/extract_list_of_sph.py data/fbank/cuts_fisher.jsonl | sort | uniq > data/fbank/cuts_fisher_sph.list

    num_fisher_total_session=$(wc -l <data/fbank/cuts_fisher_sph.list)
    num_fisher_dev_session=10 
    num_fisher_train_session=$(($num_fisher_total_session - $num_fisher_dev_session))
    head -n $num_fisher_dev_session data/fbank/cuts_fisher_sph.list >data/fbank/cuts_fisher_sph_dev.list
    tail -n $num_fisher_train_session data/fbank/cuts_fisher_sph.list >data/fbank/cuts_fisher_sph_train.list

    # extarct dev json
    python3 local/extract_json_cuts.py data/fbank/cuts_fisher_sph_dev.list data/fbank/cuts_fisher.jsonl data/fbank/dev_cuts_fisher.jsonl
    gzip -c data/fbank/dev_cuts_fisher.jsonl > data/fbank/dev_cuts_fisher.jsonl.gz

    # extract train json
    python3 local/extract_json_cuts.py data/fbank/cuts_fisher_sph_train.list data/fbank/cuts_fisher.jsonl data/fbank/train_cuts_fisher.jsonl
    gzip -c data/fbank/train_cuts_fisher.jsonl  > data/fbank/train_cuts_fisher.jsonl.gz
    
    # describe cut
    lhotse cut describe data/fbank/train_cuts_fisher.jsonl.gz
    lhotse cut describe data/fbank/dev_cuts_fisher.jsonl.gz

    # extract dev supervision
    python local/extract_json_supervision.py data/fbank/cuts_fisher_sph_dev.list data/manifests/supervisions_fisher.jsonl data/manifests/dev_supervisions_fisher.jsonl
    python local/extract_json_supervision.py data/fbank/cuts_fisher_sph_train.list data/manifests/supervisions_fisher.jsonl data/manifests/train_supervisions_fisher.jsonl
    
    ######################################
    #swbd
    ######################################

    gzip -d data/fbank/cuts_swbd.json.gz
    jq -c '.[]' data/fbank/cuts_swbd.json > data/fbank/cuts_swbd.jsonl
    gzip -c data/fbank/cuts_swbd.jsonl > data/fbank/cuts_swbd.jsonl.gz

    python3 local/extract_list_of_sph.py data/fbank/cuts_swbd.jsonl| sort | uniq > data/fbank/cuts_swbd_sph.list
    num_swbd_total_session=$(wc -l <data/fbank/cuts_swbd_sph.list)
    num_swbd_dev_session=10 
    num_swbd_train_session=$(($num_swbd_total_session - $num_swbd_dev_session))

    head -n $num_swbd_dev_session data/fbank/cuts_swbd_sph.list >data/fbank/cuts_swbd_sph_dev.list
    tail -n $num_swbd_train_session data/fbank/cuts_swbd_sph.list >data/fbank/cuts_swbd_sph_train.list

    # extarct dev json
    python3 local/extract_json_cuts.py data/fbank/cuts_swbd_sph_dev.list data/fbank/cuts_swbd.jsonl data/fbank/dev_cuts_swbd.jsonl
    gzip -c data/fbank/dev_cuts_swbd.jsonl > data/fbank/dev_cuts_swbd.jsonl.gz

    python3 local/extract_json_cuts.py  data/fbank/cuts_swbd_sph_train.list data/fbank/cuts_swbd.jsonl  data/fbank/train_cuts_swbd.jsonl
    gzip -c data/fbank/train_cuts_swbd.jsonl > data/fbank/train_cuts_swbd.jsonl.gz
    
    # describe cut
    lhotse cut describe data/fbank/train_cuts_swbd.jsonl.gz
    lhotse cut describe data/fbank/dev_cuts_swbd.jsonl.gz

    # extract dev supervision                                                                                                                
    python local/extract_json_supervision.py data/fbank/cuts_swbd_sph_dev.list data/manifests/supervisions_swbd.jsonl data/manifests/dev_supervisions_swbd.jsonl
    python local/extract_json_supervision.py data/fbank/cuts_swbd_sph_train.list data/manifests/supervisions_swbd.jsonl data/manifests/train_supervisions_swbd.jsonl
fi

if [ $stage -le 6 ] && [ $stop_stage -ge 6 ]; then
  log "Stage 3: Prepare musan manifest"
  # We assume that you have downloaded the musan corpus                                                                                      
  # to data/musan                                                                                                                            
  mkdir -p data/manifests/musan
  lhotse prepare musan $dl_dir/musan data/manifests/musan  
fi

if [ $stage -le 7 ] && [ $stop_stage -ge 7 ]; then
   python3 local/compute_fbank_musan.py
fi


if [ $stage -le 8 ] && [ $stop_stage -ge 8 ]; then
  log "Stage 6: Dump transcripts for LM training"
  mkdir -p data/lm
  cat data/manifests/supervisions_fisher.jsonl data/manifests/supervisions_swbd.jsonl \
    | jq '.text' \
    | sed 's:"::g' \
	  > data/lm/transcript_words.txt

  cat data/manifests/train_supervisions_fisher.jsonl data/manifests/train_supervisions_swbd.jsonl \
    | jq '.text' \
    | sed 's:"::g' \
          > data/lm/train_transcript_words.txt

  cat data/manifests/dev_supervisions_fisher.jsonl data/manifests/dev_supervisions_swbd.jsonl \
    | jq '.text' \
    | sed 's:"::g' \
          > data/lm/dev_transcript_words.txt
fi

if [ $stage -le 9 ] && [ $stop_stage -ge 9 ]; then
  log "Stage 7: Prepare lexicon using g2p_en"
  lang_dir=data/lang_phone
  mkdir -p $lang_dir

  # Add special words to words.txt
  echo "<eps> 0" > $lang_dir/words.txt
  echo "!SIL 1" >> $lang_dir/words.txt
  echo "[UNK] 2" >> $lang_dir/words.txt

  # Add regular words to words.txt
	#gunzip -c data/manifests/fisher-swbd_supervisions_norm.jsonl.gz \
  cat data/manifests/supervisions_fisher.jsonl data/manifests/supervisions_swbd.jsonl \
    | jq '.text' \
    | sed 's:"::g' \
    | sed 's: :\n:g' \
    | sort \
    | uniq \
    | awk '{print $0,NR+2}' \
    >> $lang_dir/words.txt

  # Add remaining special word symbols expected by LM scripts.
  num_words=$(cat $lang_dir/words.txt | wc -l)
  echo "<s> ${num_words}" >> $lang_dir/words.txt
  num_words=$(cat $lang_dir/words.txt | wc -l)
  echo "</s> ${num_words}" >> $lang_dir/words.txt
  num_words=$(cat $lang_dir/words.txt | wc -l)
  echo "#0 ${num_words}" >> $lang_dir/words.txt

  if [ ! -f $lang_dir/L_disambig.pt ]; then
    # We discard SWBD's lexicon and just use g2p_en
    # It was trained on CMUdict and looks it up before
    # resorting to an LSTM G2P model.
    pip install g2p_en
    ./local/prepare_lang_g2pen.py --lang-dir $lang_dir
  fi
fi

if [ $stage -le 10 ] && [ $stop_stage -ge 10 ]; then
  log "Stage 8: Prepare BPE based lang"

  for vocab_size in ${vocab_sizes[@]}; do
    lang_dir=data/lang_bpe_${vocab_size}
    mkdir -p $lang_dir
    # We reuse words.txt from phone based lexicon
    # so that the two can share G.pt later.
    cp data/lang_phone/words.txt $lang_dir

    ./local/train_bpe_model.py \
      --lang-dir $lang_dir \
      --vocab-size $vocab_size \
      --transcript data/lm/transcript_words.txt

    if [ ! -f $lang_dir/L_disambig.pt ]; then
      ./local/prepare_lang_bpe.py --lang-dir $lang_dir
    fi
  done
fi

if [ $stage -le 11 ] && [ $stop_stage -ge 11 ]; then
  log "Stage 9: Train LM"
  lm_dir=data/lm

  if [ ! -f $lm_dir/G.arpa ]; then
    ./shared/make_kn_lm.py \
      -ngram-order 3 \
      -text $lm_dir/transcript_words.txt \
      -lm $lm_dir/G.arpa
  fi

  if [ ! -f $lm_dir/G_3_gram.fst.txt ]; then
    python3 -m kaldilm \
      --read-symbol-table="data/lang_phone/words.txt" \
      --disambig-symbol='#0' \
      --max-order=3 \
      $lm_dir/G.arpa > $lm_dir/G_3_gram.fst.txt
  fi
fi

if [ $stage -le 12 ] && [ $stop_stage -ge 12 ]; then
  log "Stage 10: Compile HLG"
  ./local/compile_hlg.py --lang-dir data/lang_phone

  for vocab_size in ${vocab_sizes[@]}; do
    lang_dir=data/lang_bpe_${vocab_size}
    ./local/compile_hlg.py --lang-dir $lang_dir
  done
fi
