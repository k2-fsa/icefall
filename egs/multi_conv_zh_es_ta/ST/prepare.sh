#!/usr/bin/env bash
# Copyright 2023 Johns Hopkins University  (Amir Hussein)
# Apache 2.0  (http://www.apache.org/licenses/LICENSE-2.0)

set -eou pipefail

nj=20
stage=0
stop_stage=7

# We assume dl_dir (download dir) contains the following
# directories and files.
#
#  - $dl_dir/cts
#
#      You can download the data from
#
#
#  - $dl_dir/musan
#      This directory contains the following directories downloaded from
#       http://www.openslr.org/17/
#
#     - music
#     - noise
#     - speech
#

dl_dir=cts
. shared/parse_options.sh || exit 1

# vocab size for sentence piece models.
# It will generate data/lang_bpe_xxx,
# data/lang_bpe_yyy if the array contains xxx, yyy
vocab_sizes=(
  5000
)
st_vocab_sizes=(
  4000
)

# All files generated by this script are saved in "data".
# You can safely remove "data" and rerun this script to regenerate it.
mkdir -p data

log() {
  # This function is from espnet
  local fname=${BASH_SOURCE[1]##*/}
  echo -e "$(date '+%Y-%m-%d %H:%M:%S') (${fname}:${BASH_LINENO[0]}:${FUNCNAME[1]}) $*"
}

log "dl_dir: $dl_dir"

if [ $stage -le 0 ] && [ $stop_stage -ge 0 ]; then
  log "Stage 0: Download data"

  # Download callhome_spanish, fisher_spanish iwslt22_ta and HKUST from LDC 
  # 
  # you can create a symlink
  #
  #   ln -sfv /path/to/data $dl_dir/data

  # If you have pre-downloaded it to /path/to/musan,
  # you can create a symlink
  #
  #   ln -sfv /path/to/musan $dl_dir/
  #
  if [ ! -d $dl_dir/musan ]; then
    lhotse download musan $dl_dir
  fi
fi

fbank=data/fbank
manifests=data/manifests
mkdir -p $manifests
sets="hkust iwslt-ta callhome-sp fisher-sp"
if [ $stage -le 0 ] && [ $stop_stage -ge 0 ]; then
  log "Stage 0: Prepare telephone manifest"
  # We assume that you have downloaded callhome_spanish, fisher_spanish iwslt22_ta and hkust to $dl_dir/
  for set in $sets; do
    log "Prepare $set manifests"
    if [[ "$set" == "iwslt-ta" ]]; then
      if [ ! -d "iwslt22-dialect" ]; then
        echo "Splits directory (iwslt22-dialect) does not exist"
        echo "Run: git clone https://github.com/kevinduh/iwslt22-dialect"
        exit 1
      else
        lhotse prepare "$set" "$dl_dir/$set" iwslt22-dialect "$manifests"
      fi
    else
      lhotse prepare "$set" "$dl_dir/$set" "$manifests"
      # validate recordings and supervisions
    fi
    # python local/cuts_validate.py \
    #     --sup "${manifests}/supervisions.jsonl.gz" \
    #     --rec "${manifests}/recordings.jsonl.gz" \
    #     --savecut "${manifests}/cuts_${set}.jsonl.gz"
  done
fi

if [ $stage -le 1 ] && [ $stop_stage -ge 1 ]; then
  if [ ! -f ${manifests}/cut_train.jsonl.gz ]; then
    log "Combining conversational data to create train, dev sets"
    # combine train
    lhotse combine $manifests/iwslt-ta_supervisions_train.jsonl.gz  $manifests/hkust_supervisions_train.jsonl.gz $manifests/fisher-sp_supervisions_train.jsonl.gz ${manifests}/cts_supervisions_train.jsonl.gz
    
    lhotse combine $manifests/iwslt-ta_recordings_train.jsonl.gz  $manifests/hkust_recordings_train.jsonl.gz  $manifests/fisher-sp_recordings_train.jsonl.gz ${manifests}/cts_recordings_train.jsonl.gz
    
    # python local/cuts_validate.py --sup $manifests/cts_supervisions_train.jsonl.gz --rec ${manifests}/cts_recordings_train.jsonl.gz

    # combine dev
    lhotse combine $manifests/iwslt-ta_supervisions_dev1.jsonl.gz  $manifests/hkust_supervisions_dev1.jsonl.gz $manifests/fisher-sp_supervisions_dev.jsonl.gz  ${manifests}/cts_supervisions_dev.jsonl.gz
        
    lhotse combine $manifests/iwslt-ta_recordings_dev1.jsonl.gz $manifests/fisher-spanish_recordings_dev.jsonl.gz $manifests/hkust_recordings_dev1.jsonl.gz $manifests/fisher-sp_recordings_dev.jsonl.gz ${manifests}/cts_recordings_dev.jsonl.gz

    # python local/cuts_validate.py --sup ${manifests}/cts_supervisions_dev.jsonl.gz --rec ${manifests}/cts_recordings_dev.jsonl.gz
  fi
fi

if [ $stage -le 2 ] && [ $stop_stage -ge 2 ]; then
  log "Stage 2: Prepare musan manifest"
  # We assume that you have downloaded the musan corpus
  # to data/musan
  if [ ! -f ${manifests}/musan_recordings_speech.jsonl.gz ]; then
    mkdir -p $manifests
    lhotse prepare musan $dl_dir/musan $manifests
  fi
fi

if [ $stage -le 3 ] && [ $stop_stage -ge 3 ]; then
  log "Stage 3: Compute fbank features"
  mkdir -p ${fbank}
  ./local/compute_fbank_gpu.py
  ./local/compute_fbank_gpu.py --test
fi

if [ $stage -le 4 ] && [ $stop_stage -ge 4 ]; then
  log "Stage 4: Compute fbank for musan"
  ./local/compute_fbank_musan.py
fi

if [ $stage -le 6 ] && [ $stop_stage -ge 6 ]; then
  log "Stage 6: Prepare BPE based lang"
  for vocab_size in ${vocab_sizes[@]}; do
    lang_dir=data/lang_bpe_${vocab_size}
    mkdir -p ${lang_dir}
    cp data/lang_phone/words.txt $lang_dir
    if [ ! -f $lang_dir/transcript_words.txt ]; then
      log "Generate text for BPE training from data/fbank/cuts_train.jsonl.gz"
      python local/prepare_transcripts.py --cut ${fbank}/cuts_train.jsonl.gz --langdir ${lang_dir} 
    fi
    ./local/train_bpe_model.py \
      --lang-dir $lang_dir \
      --vocab-size $vocab_size \
      --transcript $lang_dir/transcript_words.txt
  done
fi


if [ $stage -le 7 ] && [ $stop_stage -ge 7 ]; then
  log "Stage 7: Prepare BPE ST based lang"
  for vocab_size in ${st_vocab_sizes[@]}; do
    lang_dir=data/lang_st_bpe_${vocab_size}
    mkdir -p ${lang_dir}

    if [ ! -f $lang_dir/st_words.txt ]; then
      log "Generate text for BPE training from data/fbank/cuts_train.jsonl.gz"
      python local/prepare_st_transcripts.py --cut ${fbank}/cuts_train.jsonl.gz --langdir ${lang_dir} 
    fi
    ./local/train_bpe_model.py \
      --lang-dir $lang_dir \
      --vocab-size $vocab_size \
      --transcript $lang_dir/st_words.txt
  done
fi

