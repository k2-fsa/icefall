#!/usr/bin/env bash

# fix segmentation fault reported in https://github.com/k2-fsa/icefall/issues/674
export PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python

set -eou pipefail

stage=-1
stop_stage=100
perturb_speed=true


# We assume dl_dir (download dir) contains the following
# directories and files. If not, they will be downloaded
# by this script automatically.
#
#  - $dl_dir/mdcc
#       |-- README.md
#       |-- audio/
#       |-- clip_info_rthk.csv
#       |-- cnt_asr_metadata_full.csv
#       |-- cnt_asr_test_metadata.csv
#       |-- cnt_asr_train_metadata.csv
#       |-- cnt_asr_valid_metadata.csv
#       |-- data_statistic.py
#       |-- length
#       |-- podcast_447_2021.csv
#       |-- test.txt
#       |-- transcription/
#       `-- words_length
#      You can download them from:
#      https://drive.google.com/file/d/1epfYMMhXdBKA6nxPgUugb2Uj4DllSxkn/view?usp=drive_link
#
#  - $dl_dir/musan
#      This directory contains the following directories downloaded from
#       http://www.openslr.org/17/
#
#     - music
#     - noise
#     - speech

dl_dir=$PWD/download

. shared/parse_options.sh || exit 1

# All files generated by this script are saved in "data".
# You can safely remove "data" and rerun this script to regenerate it.
mkdir -p data

log() {
  # This function is from espnet
  local fname=${BASH_SOURCE[1]##*/}
  echo -e "$(date '+%Y-%m-%d %H:%M:%S') (${fname}:${BASH_LINENO[0]}:${FUNCNAME[1]}) $*"
}

log "dl_dir: $dl_dir"

if [ $stage -le 0 ] && [ $stop_stage -ge 0 ]; then
  log "stage 0: Download data"

  # If you have pre-downloaded it to /path/to/mdcc,
  # you can create a symlink
  #
  #   ln -sfv /path/to/mdcc $dl_dir/mdcc
  #
  # The directory structure is
  # mdcc/
  #  |-- README.md
  #  |-- audio/
  #  |-- clip_info_rthk.csv
  #  |-- cnt_asr_metadata_full.csv
  #  |-- cnt_asr_test_metadata.csv
  #  |-- cnt_asr_train_metadata.csv
  #  |-- cnt_asr_valid_metadata.csv
  #  |-- data_statistic.py
  #  |-- length
  #  |-- podcast_447_2021.csv
  #  |-- test.txt
  #  |-- transcription/
  #  `-- words_length

  if [ ! -d $dl_dir/mdcc/audio ]; then
    lhotse download mdcc $dl_dir

    # this will download and unzip dataset.zip to $dl_dir/

    mv $dl_dir/dataset $dl_dir/mdcc
  fi

  # If you have pre-downloaded it to /path/to/musan,
  # you can create a symlink
  #
  #   ln -sfv /path/to/musan $dl_dir/musan
  #
  if [ ! -d $dl_dir/musan ]; then
    lhotse download musan $dl_dir
  fi
fi

if [ $stage -le 1 ] && [ $stop_stage -ge 1 ]; then
  log "Stage 1: Prepare MDCC manifest"
  # We assume that you have downloaded the MDCC corpus
  # to $dl_dir/mdcc
  if [ ! -f data/manifests/.mdcc_manifests.done ]; then
    log "Might take 40 minutes to traverse the directory."
    mkdir -p data/manifests
    lhotse prepare mdcc $dl_dir/mdcc data/manifests
    touch data/manifests/.mdcc_manifests.done
  fi
fi

if [ $stage -le 2 ] && [ $stop_stage -ge 2 ]; then
  log "Stage 2: Prepare musan manifest"
  # We assume that you have downloaded the musan corpus
  # to data/musan
  if [ ! -f data/manifests/.musan_manifests.done ]; then
    log "It may take 6 minutes"
    mkdir -p data/manifests
    lhotse prepare musan $dl_dir/musan data/manifests
    touch data/manifests/.musan_manifests.done
  fi
fi

if [ $stage -le 3 ] && [ $stop_stage -ge 3 ]; then
  log "Stage 3: Compute fbank for MDCC"
  if [ ! -f data/fbank/.mdcc.done ]; then
    mkdir -p data/fbank
    ./local/compute_fbank_mdcc.py --perturb-speed ${perturb_speed}
    touch data/fbank/.mdcc.done
  fi
fi

if [ $stage -le 4 ] && [ $stop_stage -ge 4 ]; then
  log "Stage 4: Compute fbank for musan"
  if [ ! -f data/fbank/.msuan.done ]; then
    mkdir -p data/fbank
    ./local/compute_fbank_musan.py
    touch data/fbank/.msuan.done
  fi
fi

lang_char_dir=data/lang_char
if [ $stage -le 5 ] && [ $stop_stage -ge 5 ]; then
  log "Stage 5: Prepare char based lang"
  mkdir -p $lang_char_dir

  # Prepare text.
  # Note: in Linux, you can install jq with the following command:
  # 1. wget -O jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
  # 2. chmod +x ./jq
  # 3. cp jq /usr/bin
  if [ ! -f $lang_char_dir/text ]; then
    gunzip -c data/manifests/mdcc_supervisions_train.jsonl.gz \
      |jq '.text' | sed 's/"//g' | ./local/text2token.py -t "char" \
      > $lang_char_dir/train_text

    cat $lang_char_dir/train_text > $lang_char_dir/text

    gunzip -c data/manifests/mdcc_supervisions_test.jsonl.gz \
      |jq '.text' | sed 's/"//g' | ./local/text2token.py -t "char" \
      > $lang_char_dir/valid_text
    
    cat $lang_char_dir/valid_text >> $lang_char_dir/text
  
    gunzip -c data/manifests/mdcc_supervisions_valid.jsonl.gz \
      |jq '.text' | sed 's/"//g' | ./local/text2token.py -t "char" \
      > $lang_char_dir/test_text

    cat $lang_char_dir/test_text >> $lang_char_dir/text
  fi

  if [ ! -f $lang_char_dir/text_words_segmentation ]; then
    ./local/preprocess_mdcc.py --input-file $lang_char_dir/text \
      --output-dir $lang_char_dir
    
    mv $lang_char_dir/text $lang_char_dir/_text
    cp $lang_char_dir/text_words_segmentation $lang_char_dir/text
  fi

  if [ ! -f $lang_char_dir/tokens.txt ]; then
    ./local/prepare_char.py --lang-dir $lang_char_dir
  fi
fi

if [ $stage -le 6 ] && [ $stop_stage -ge 6 ]; then
  log "Stage 6: Prepare G"

  mkdir -p data/lm

  # Train LM on transcripts
  if [ ! -f data/lm/3-gram.unpruned.arpa ]; then
    python3 ./shared/make_kn_lm.py \
      -ngram-order 3 \
      -text $lang_char_dir/text_words_segmentation \
      -lm data/lm/3-gram.unpruned.arpa
  fi

  # We assume you have installed kaldilm, if not, please install
  # it using: pip install kaldilm
  if [ ! -f data/lm/G_3_gram_char.fst.txt ]; then
    # It is used in building HLG
    python3 -m kaldilm \
      --read-symbol-table="$lang_char_dir/words.txt" \
      --disambig-symbol='#0' \
      --max-order=3 \
      data/lm/3-gram.unpruned.arpa > data/lm/G_3_gram_char.fst.txt
  fi

  if [ ! -f $lang_char_dir/HLG.fst ]; then
    ./local/prepare_lang_fst.py  \
      --lang-dir $lang_char_dir \
      --ngram-G ./data/lm/G_3_gram_char.fst.txt
  fi
fi

if [ $stage -le 7 ] && [ $stop_stage -ge 7 ]; then
  log "Stage 7: Compile LG & HLG"

  ./local/compile_hlg.py --lang-dir $lang_char_dir --lm G_3_gram_char
  ./local/compile_lg.py --lang-dir $lang_char_dir --lm G_3_gram_char
fi

if [ $stage -le 8 ] && [ $stop_stage -ge 8 ]; then
  log "Stage 8: Generate LM training data"

  log "Processing char based data"
  out_dir=data/lm_training_char
  mkdir -p $out_dir $dl_dir/lm

  if [ ! -f $dl_dir/lm/mdcc-train-word.txt ]; then
    ./local/text2segments.py --input-file $lang_char_dir/train_text \
        --output-file $dl_dir/lm/mdcc-train-word.txt
  fi

  # training words
  ./local/prepare_char_lm_training_data.py \
    --lang-char data/lang_char \
    --lm-data $dl_dir/lm/mdcc-train-word.txt \
    --lm-archive $out_dir/lm_data.pt
  
  # valid words
  if [ ! -f $dl_dir/lm/mdcc-valid-word.txt ]; then
    ./local/text2segments.py --input-file $lang_char_dir/valid_text \
        --output-file $dl_dir/lm/mdcc-valid-word.txt
  fi

  ./local/prepare_char_lm_training_data.py \
    --lang-char data/lang_char \
    --lm-data $dl_dir/lm/mdcc-valid-word.txt \
    --lm-archive $out_dir/lm_data_valid.pt

  # test words
  if [ ! -f $dl_dir/lm/mdcc-test-word.txt ]; then
    ./local/text2segments.py --input-file $lang_char_dir/test_text \
        --output-file $dl_dir/lm/mdcc-test-word.txt
  fi

  ./local/prepare_char_lm_training_data.py \
    --lang-char data/lang_char \
    --lm-data $dl_dir/lm/mdcc-test-word.txt \
    --lm-archive $out_dir/lm_data_test.pt
fi

if [ $stage -le 9 ] && [ $stop_stage -ge 9 ]; then
  log "Stage 9: Sort LM training data"
  # Sort LM training data by sentence length in descending order
  # for ease of training.
  #
  # Sentence length equals to the number of tokens
  # in a sentence.

  out_dir=data/lm_training_char
  mkdir -p $out_dir
  ln -snf ../../../librispeech/ASR/local/sort_lm_training_data.py local/

  ./local/sort_lm_training_data.py \
    --in-lm-data $out_dir/lm_data.pt \
    --out-lm-data $out_dir/sorted_lm_data.pt \
    --out-statistics $out_dir/statistics.txt

  ./local/sort_lm_training_data.py \
    --in-lm-data $out_dir/lm_data_valid.pt \
    --out-lm-data $out_dir/sorted_lm_data-valid.pt \
    --out-statistics $out_dir/statistics-valid.txt

  ./local/sort_lm_training_data.py \
    --in-lm-data $out_dir/lm_data_test.pt \
    --out-lm-data $out_dir/sorted_lm_data-test.pt \
    --out-statistics $out_dir/statistics-test.txt
fi

if [ $stage -le 12 ] && [ $stop_stage -ge 12 ]; then
  log "Stage 12: Train RNN LM model"
  python ../../../icefall/rnn_lm/train.py \
    --start-epoch 0 \
    --world-size 1 \
    --num-epochs 20 \
    --use-fp16 0 \
    --embedding-dim 512 \
    --hidden-dim 512 \
    --num-layers 2 \
    --batch-size 400 \
    --exp-dir rnnlm_char/exp \
    --lm-data $out_dir/sorted_lm_data.pt \
    --lm-data-valid $out_dir/sorted_lm_data-valid.pt \
    --vocab-size 4336 \
    --master-port 12345
fi
