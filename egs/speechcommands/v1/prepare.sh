#!/usr/bin/env bash

export PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python

set -eou pipefail

nj=15
stage=-1
stop_stage=100

# We assume dl_dir (download dir) contains the following
# directories and files. If not, they will be downloaded
# by this script automatically.
#
#  - $dl_dir/SpeechCommands001
#     This directory contains the following directories downloaded from
#      http://download.tensorflow.org/data/speech_commands_v0.01.tar.gz
#      http://download.tensorflow.org/data/speech_commands_test_set_v0.01.tar.gz
#
#	 - speech_commands_v0.01
#          - _background_noise_
#          - bed
#          - bird
#          - cat
#          - dog
#          - down
#          - eight
#          - five
#          - four
#          - go
#          - happy
#          - house
#          - left
#          - marvin
#          - nine
#          - no
#          - off
#          - on
#          - one
#          - right
#          - seven
#          - sheila
#          - six
#          - stop
#          - three
#          - tree
#          - two
#          - up
#          - wow
#          - yes
#          - zero
#          - testing_list.txt
#          - validation_list.txt
#
#        - speech_commands_test_set_v0.01
#          - _silence_/
#          - _unknown_/
#          - down/
#          - go/
#          - left/
#          - no/
#          - off/
#          - on/
#          - right/
#          - stop/
#          - up/
#          - yes/
dl_dir=$PWD/download

. shared/parse_options.sh || exit 1

# vocab size for sentence piece models.
# It will generate data/lang_bpe_xxx,
# data/lang_bpe_yyy if the array contains xxx, yyy
vocab_sizes=(
  # 5000
  # 2000
  # 1000
  500
)

# All files generated by this script are saved in "data".
# You can safely remove "data" and rerun this script to regenerate it.
mkdir -p data

log() {
  # This function is from espnet
  local fname=${BASH_SOURCE[1]##*/}
  echo -e "$(date '+%Y-%m-%d %H:%M:%S') (${fname}:${BASH_LINENO[0]}:${FUNCNAME[1]}) $*"
}

log "dl_dir: $dl_dir"

if [ $stage -le 0 ] && [ $stop_stage -ge 0 ]; then
  log "Stage 0: Download data"

  # If you have pre-downloaded them to
  #   /path/to/speech_commands_v0.01
  #   /path/to/speech_commands_test_set_v0.01
  # you can make a directory and create a symlink
  #   mkdir $dl_dir/speechcommands001
  #   cd $dl_dir/speechcommands001
  #   ln -sfv /path/to/speech_commands_v0.01 .
  #   ln -sfv /path/to/speech_commands_test_set_v0.01 .
  #
  if [ ! -d $dl_dir/speechcommands001/speech_commands_v0.01 ] || [ ! -d $dl_dir/speechcommands001/speech_commands_test_set_v0.01 ]; then
    lhotse download speechcommands001 $dl_dir
  fi
fi

if [ $stage -le 1 ] && [ $stop_stage -ge 1 ]; then
  log "Stage 1: Prepare SpeechCommands001 manifest"
  # We assume that you have downloaded the speech_commands_v0.01 and speech_commands_test_set_v0.01 corpus
  # to $dl_dir/SpeechCommands001
  mkdir -p data/manifests
  if [ ! -e data/manifests/.speechcommands001.done ]; then
    lhotse prepare speechcommands001 $dl_dir/SpeechCommands001 data/manifests
    touch data/manifests/.speechcommands001.done
  fi
fi
