#!/usr/bin/env bash

# Prepare script for MLS English ASR recipe in icefall
# This recipe uses on-the-fly feature extraction, so it skips manifest
# and feature generation steps used in other recipes.

# fix segmentation fault reported in https://github.com/k2-fsa/icefall/issues/674
export PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python

set -eou pipefail

nj=15
stage=-1
stop_stage=100

# Configuration for BPE tokenizer
vocab_sizes=(2000)  # You can add more sizes like (500 1000 2000) for comparison

# Directory where dataset will be downloaded
dl_dir=$PWD/download

. shared/parse_options.sh || exit 1

# All files generated by this script are saved in "data".
mkdir -p data

log() {
    local fname=${BASH_SOURCE[1]##*/}
    echo -e "$(date '+%Y-%m-%d %H:%M:%S') (${fname}:${BASH_LINENO[0]}:${FUNCNAME[1]}) $*"
}

log "Starting MLS English data preparation"

if [ $stage -le 0 ] && [ $stop_stage -ge 0 ]; then
  log "Stage 0: Download MLS English dataset"
  if [ ! -d $dl_dir/mls_english ]; then
    if ! git clone https://huggingface.co/datasets/parler-tts/mls_eng $dl_dir/mls_english; then
      log "Failed to download MLS English dataset"
      exit 1
    fi
  fi
fi

if [ $stage -le 1 ] && [ $stop_stage -ge 1 ]; then
    log "Stage 1: Prepare MLS English manifests and compute fbank"
    # We assume that you have downloaded the MLS English corpus
    # to $dl_dir/mls_english
    mkdir -p data/manifests
    if [ ! -e data/mls_english.done ]; then
        # lhotse prepare mls_english -j $nj $dl_dir/mls_english data/manifests
        python local/compute_fbank_mls_english.py --manifest-dir data/manifests --audio-dir data/audio --dl-dir $dl_dir/mls_english
        touch data/manifests/.mls_english.done
    fi
fi

if [ $stage -le 2 ] && [ $stop_stage -ge 2 ]; then
    log "Stage 2: Validate MLS English manifests"
    if [ ! -e data/manifests/.mls_english-validated.done ]; then
        python local/validate_manifest.py --manifest data/manifests/mls_english_cuts_train.jsonl.gz
        python local/validate_manifest.py --manifest data/manifests/mls_english_cuts_dev.jsonl.gz
        python local/validate_manifest.py --manifest data/manifests/mls_english_cuts_test.jsonl.gz
        touch data/manifests/.mls_english-validated.done
    fi
fi


mkdir -p data/lang
lang_dir=data/lang

if [ $stage -le 3 ] && [ $stop_stage -ge 3 ]; then
  log "Stage 3: Prepare transcript for BPE training"
  if [ ! -f $lang_dir/transcript.txt ]; then
    log "Generating transcripts for BPE training"
    ./local/utils/generate_transcript.py --lang-dir $lang_dir
  fi
fi

if [ $stage -le 4 ] && [ $stop_stage -ge 4 ]; then
  log "Stage 4: Prepare BPE tokenizer"

  for vocab_size in ${vocab_sizes[@]}; do
    log "Training BPE model with vocab_size=${vocab_size}"
    bpe_dir=data/lang/bpe_${vocab_size}
    mkdir -p $bpe_dir

    if [ ! -f $bpe_dir/bpe.model ]; then
      ./local/train_bpe_model.py \
        --lang-dir $bpe_dir \
        --vocab-size $vocab_size \
        --transcript $lang_dir/transcript.txt
    fi
  done
fi

log "MLS English data preparation completed successfully"
